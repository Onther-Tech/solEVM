pragma solidity ^0.5.2;
pragma experimental ABIEncoderV2;


library MerkelizerStorage {
    uint constant internal DEFAULT_GAS = 0x0fffffffffffff;

     struct Account {
        address addr;
        uint nonce;
        uint balance;
        bytes codeHash;
        bytes storageRoot;
    }

    struct AccountProof {
        address addr;
        bytes rlpVal;
        bytes32 stateRoot;
        bytes siblings;
    }

    struct ExecutionState {
        bytes data;
        bytes32[] stack;
        bytes32[] mem;
        bytes32[] tStorage;
        bytes returnData;
        uint pc;
        uint gasRemaining;
        uint stackSize;
        uint memSize;
        bool isStorageReset;
        bytes32 logHash;
        bool isCREATE;
        bool isCREATE2;
        bytes32 initCodeHash;
        bool isCALL;
        bool isDELEGATECALL;
        bool isStorageDataChanged;
        bool isFirstStep;
        uint callDepth;
        bool callStart;
        bool callEnd;
        bool callValue;
        bytes32 previousRuntimeStackHash;
        bytes32 runtimeStackHash;
        bytes32 accountHash;
        bytes32 storageRoot;
        bytes32 stateRoot;
        AccountProof storageAccount;
        AccountProof bytecodeAccount;
        AccountProof beforeCalleeAccount;
    }

    function memHash(bytes32[] memory _mem) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked(_mem));
    }

    function dataHash(bytes memory _data) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked(_data));
    }

    function stackHash(ExecutionState memory self, bytes32 _sibling) internal pure returns (bytes32) {
        bytes32 hash = _sibling;
        bytes32[] memory stack = self.stack;

        for (uint i = 0; i < stack.length; i++) {
            assembly {
                mstore(0, hash)
                mstore(0x20, mload(add(add(stack, 0x20), mul(i, 0x20))))
                hash := keccak256(0, 0x40)
            }
        }

        return hash;
    }

    function storageHash(bytes32[] memory _tStorage) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked(_tStorage));
    }

    function runtimeStackHash(
        address storageAddr,
        address bytecodeAddr,
        bytes32 sibling
    ) internal pure returns (bytes32) {
        bytes32 addrHash = keccak256(abi.encodePacked(storageAddr, bytecodeAddr));
        return keccak256(abi.encodePacked(
           addrHash, sibling
        ));
    }

     function accountHash(
        address storageAddr,
        bytes memory storageRlpVal,
        address bytecodeAddr,
        bytes memory bytecodeRlpVal
    ) internal pure returns (bytes32) {
        // TODO: add EVM parameter about like context (ie. gasRemaining, pc, calldepth etc.)
        bytes32 storageAccountHash = accountHashes(storageAddr, storageRlpVal);
        bytes32 byteAccountHash = accountHashes(bytecodeAddr, bytecodeRlpVal);
        return keccak256(abi.encodePacked(
           storageAccountHash, byteAccountHash
        ));
    }

    function accountHashes(
        address addr,
        bytes memory rlpVal
    ) internal pure returns (bytes32) {
        // TODO: add EVM parameter about like context (ie. gasRemaining, pc, calldepth etc.)
        return keccak256(abi.encodePacked(
           addr, rlpVal
        ));
    }

    function intermediateHash(
        ExecutionState memory self,
        bytes32 _stackHash,
        bytes32 _memHash,
        bytes32 _dataHash,
        bytes32 _storageRoot,
        bytes32 _stateRoot,
        bytes32 _addressHash,
        bytes32 _accountHash
    ) internal pure returns (bytes32) {
        if (_memHash == 0) {
            _memHash = memHash(self.mem);
        }

        if (_dataHash == 0) {
            _dataHash = dataHash(self.data);
        }

        return keccak256(
            abi.encodePacked(
                _stackHash,
                _memHash,
                _dataHash,
                _storageRoot,
                _stateRoot,
                _addressHash,
                _accountHash
            )
        );
    }

    function envHash (ExecutionState memory self) internal pure returns (bytes32) {
        return keccak256(
            abi.encodePacked(
                self.logHash,
                // self.customEnvironmentHash,
                self.pc,
                // @dev trick for CALL.
                // self.gasRemaining,
                self.stackSize,
                self.memSize
            )
        );
    }

    function stateHash(
        ExecutionState memory self,
        bytes32 _intermediateHash,
        bytes32 _envHash
    ) internal pure returns (bytes32) {
        bytes32 _preHash = keccak256(
            abi.encodePacked(
                _intermediateHash,
                _envHash
            )
        );
        // Question: before we *eventually* implement `FragmentTree` for `returnData`,
        // should we also hash the bytelength from `returnData`.
        // This is probably not needed because the array would be too large anyway to verify on-chain
        // for a possible hash-collision
        return keccak256(abi.encodePacked(_preHash, self.returnData));
    }

    function initialStateHash(
        bytes32 dataHash,
        bytes32 storageRoot,
        bytes32 stateRoot,
        bytes32 runtimeStackHash,
        bytes32 accountHash
    ) internal pure returns (bytes32) {
        ExecutionState memory e;
        e.gasRemaining = DEFAULT_GAS;
        // e.customEnvironmentHash = customEnvironmentHash;
        bytes32 _intermediateHash = intermediateHash(e, 0, 0, dataHash, storageRoot, stateRoot, runtimeStackHash, accountHash);
        bytes32 _envHash = envHash(e);

        return stateHash(e, _intermediateHash, _envHash);
    }
}