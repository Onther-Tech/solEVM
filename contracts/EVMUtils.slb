pragma solidity ^0.5.2;
pragma experimental ABIEncoderV2;

import {MemOps} from "./MemOps.slb";


library EVMUtils {

    function toUint(bytes memory bts, uint addr, uint numBytes) internal pure returns (uint data) {
        assert(32 >= numBytes && numBytes > 0 && addr + numBytes <= bts.length);
        assembly {
            data := mload(add(add(bts, 0x20), addr))
        }
        data = data >> 8 * (32 - numBytes);
    }

    function fromUint(uint x) internal pure returns (bytes memory bts) {
        bts = new bytes(32);
        assembly {
            mstore(add(bts, 0x20), x)
        }
    }

    function copy(bytes memory src, bytes memory dest, uint srcIdx, uint destIdx, uint len) internal pure {
        assert(srcIdx + len <= src.length);
        assert(destIdx + len <= dest.length);
        uint srcMPtr;
        uint destMPtr;
        assembly {
            srcMPtr := add(add(src, srcIdx), 0x20)
            destMPtr := add(add(dest, destIdx), 0x20)
        }
        MemOps.memcopy(srcMPtr, destMPtr, len);
    }
}
